package main

import (
	"fmt"
	"math"
	"strconv"
	"strings"
)

// "1. Проверка на простоту",
// "   Напишите функцию, которая проверяет, является ли переданное число простым. Ваша программа должна использовать циклы для проверки делителей, и если число не является простым, выводить первый найденный делитель.",
func isPrime(number int) (bool, int) {
	if number < 2 {
		return false, 0
	}
	for i := 2; i*i <= number; i++ {
		if number%i == 0 {
			return false, i
		}
	}
	return true, 0
}

// "2. Наибольший общий делитель (НОД)  ",
// "Напишите программу для нахождения наибольшего общего делителя (НОД) двух чисел с использованием алгоритма Евклида. Используйте цикл `for` для вычислений.",
// "",
func gcd(a, b int) int {
	for b != 0 {
		a, b = b, a%b
	}
	return a
}

// "3. Сортировка пузырьком  ",
// "   Реализуйте сортировку пузырьком для списка целых чисел. Программа должна выполнять сортировку на месте и выводить каждый шаг изменения массива.",
// "",
func bubbleSort(arr []int) []int {
	n := len(arr)
	sorted := make([]int, n)
	copy(sorted, arr)
	for i := 0; i < n-1; i++ {
		for j := 0; j < n-i-1; j++ {
			if sorted[j] > sorted[j+1] {
				sorted[j], sorted[j+1] = sorted[j+1], sorted[j]
			}
		}
	}
	return sorted
}

// "4. Таблица умножения в формате матрицы  ",
// "   Напишите программу, которая выводит таблицу умножения в формате матрицы 10x10. Используйте циклы для генерации строк и столбцов.",
// "",
func multiplicationTable() {
	for i := 1; i <= 10; i++ {
		for j := 1; j <= 10; j++ {
			fmt.Printf("%4d", i*j)
		}
		fmt.Println()
	}
}

// "5. Фибоначчи с мемоизацией  ",
// "   Напишите функцию для вычисления числа Фибоначчи с использованием мемоизации (сохранение ранее вычисленных результатов). Программа должна использовать рекурсию и условные операторы.",
// "",
var fibCache = map[int]int{}

func fibonacci(n int) int {
	if n <= 1 {
		return n
	}
	if val, ok := fibCache[n]; ok {
		return val
	}
	fibCache[n] = fibonacci(n-1) + fibonacci(n-2)
	return fibCache[n]
}

// "6. Обратные числа  ",
// "   Напишите программу, которая принимает целое число и выводит его в обратном порядке. Например, для числа 12345 программа должна вывести 54321. Используйте цикл для обработки цифр числа.",
// "",
func reverseNumber(number int) int {
	reversed := 0
	for number > 0 {
		reversed = reversed*10 + number%10
		number /= 10
	}
	return reversed
}

// "7. Треугольник Паскаля  ",
// "   Напишите программу, которая выводит треугольник Паскаля до заданного уровня. Для этого используйте цикл и массивы для хранения предыдущих значений строки треугольника.",
// "",
func pascalsTriangle(levels int) {
	triangle := [][]int{}
	for i := 0; i < levels; i++ {
		row := make([]int, i+1)
		row[0], row[len(row)-1] = 1, 1
		for j := 1; j < len(row)-1; j++ {
			row[j] = triangle[i-1][j-1] + triangle[i-1][j]
		}
		triangle = append(triangle, row)
		fmt.Println(row)
	}
}

// "8. Число палиндром  ",
// "   Напишите программу, которая проверяет, является ли число палиндромом (одинаково читается слева направо и справа налево). Не используйте строки для решения этой задачи — работайте только с числами.",
// "",
func isPalindrome(number int) bool {
	original, reversed := number, 0
	for number > 0 {
		reversed = reversed*10 + number%10
		number /= 10
	}
	return original == reversed
}

// "9. Нахождение максимума и минимума в массиве  ",
// "   Напишите функцию, которая принимает массив целых чисел и возвращает одновременно максимальный и минимальный элемент с использованием одного прохода по массиву.",
// "",
func findMinMax(arr []int) (int, int) {
	minVal, maxVal := arr[0], arr[0]
	for _, num := range arr {
		if num < minVal {
			minVal = num
		}
		if num > maxVal {
			maxVal = num
		}
	}
	return minVal, maxVal
}

// "10. Игра \"Угадай число\"  ",
// "   Напишите программу, которая загадывает случайное число от 1 до 100, а пользователь пытается его угадать. Программа должна давать подсказки \"больше\" или \"меньше\" после каждой попытки. Реализуйте ограничение на количество попыток.",
// "",
func guessNumber(target, attempts int) {
	for i := 0; i < attempts; i++ {
		var guess int
		fmt.Print("Введите число: ")
		fmt.Scan(&guess)
		if guess < target {
			fmt.Println("Больше!")
		} else if guess > target {
			fmt.Println("Меньше!")
		} else {
			fmt.Println("Вы угадали!")
			return
		}
	}
	fmt.Println("Попытки закончились. Число было:", target)
}

// "11. Числа Армстронга  ",
// "   Напишите программу, которая проверяет, является ли число числом Армстронга (число равно сумме своих цифр, возведённых в степень, равную количеству цифр числа). Например, 153 = 1³ + 5³ + 3³.",
// "",
func isArmstrong(number int) bool {
	digits := strconv.Itoa(number)
	sum, power := 0, len(digits)
	for _, digit := range digits {
		val := int(digit - '0')
		sum += int(math.Pow(float64(val), float64(power)))
	}
	return sum == number
}

// "12. Подсчет слов в строке  ",
// "   Напишите программу, которая принимает строку и выводит количество уникальных слов в ней. Используйте `map` для хранения слов и их количества.",
// "",
func countUniqueWords(text string) map[string]int {
	words := strings.Fields(text)
	wordCount := map[string]int{}
	for _, word := range words {
		wordCount[strings.ToLower(word)]++
	}
	return wordCount
}

// "13. Игра \"Жизнь\" (Conway's Game of Life)  ",
// "   Реализуйте клеточный автомат \"Жизнь\" Конвея для двухмерного массива. Каждая клетка может быть либо живой, либо мертвой. На каждом шаге состояния клеток изменяются по следующим правилам:",
// "   - Живая клетка с двумя или тремя живыми соседями остаётся живой, иначе умирает.",
// "   - Мёртвая клетка с тремя живыми соседями оживает.",
// "   Используйте циклы для обработки клеток.",
// "",
// "14. Цифровой корень числа  ",
// "   Напишите программу, которая вычисляет цифровой корень числа. Цифровой корень — это рекурсивная сумма цифр числа, пока не останется только одна цифра. Например, цифровой корень числа 9875 равен 2, потому что 9+8+7+5=29 → 2+9=11 → 1+1=2.",
// "",

func digitalRoot(number int) int {
	if number < 10 {
		return number
	}
	return digitalRoot(number%10 + number/10)
}

// "15. Римские цифры  ",
// "   Напишите функцию, которая преобразует арабское число (например, 1994) в римское (например, \"MCMXCIV\"). Программа должна использовать циклы и условные операторы для создания римской записи."
// ],
func toRoman(number int) string {
	var roman = []struct {
		value  int
		symbol string
	}{
		{1000, "M"}, {900, "CM"}, {500, "D"}, {400, "CD"},
		{100, "C"}, {90, "XC"}, {50, "L"}, {40, "XL"},
		{10, "X"}, {9, "IX"}, {5, "V"}, {4, "IV"}, {1, "I"},
	}
	var result strings.Builder
	for _, r := range roman {
		for number >= r.value {
			result.WriteString(r.symbol)
			number -= r.value
		}
	}
	return result.String()
}

// Main
func main() {
	is, fval := isPrime(17)
	fmt.Println("1. Проверка на простоту:", is, fval)
	fmt.Println("2. НОД чисел 56 и 98:", gcd(56, 98))
	fmt.Println("3. Сортировка пузырьком, исх {5, 3, 8, 6}:", bubbleSort([]int{5, 3, 8, 6}))
	fmt.Println("4. Таблица умножения:")
	multiplicationTable()
	fmt.Println("5. Число Фибоначчи для 10:", fibonacci(10))
	fmt.Println("6. Обратное число 12345:", reverseNumber(12345))
	fmt.Println("7. Треугольник Паскаля:")
	pascalsTriangle(5)
	fmt.Println("8. Число 121 палиндром? :", isPalindrome(121))
	mm, mmax := findMinMax([]int{3, 7, 2, 5})
	fmt.Println("9. Мин и Макс в массиве {3, 7, 2, 5}:", mm, mmax)
	fmt.Println("11. Число Армстронга 153?:", isArmstrong(153))
	fmt.Println("12. Подсчет слов:", countUniqueWords("Go is great and Go is fun"))
	fmt.Println("14. Цифровой корень числа 9875:", digitalRoot(9875))
	fmt.Println("15. Римские цифры для 1994 - :", toRoman(1994))
}
